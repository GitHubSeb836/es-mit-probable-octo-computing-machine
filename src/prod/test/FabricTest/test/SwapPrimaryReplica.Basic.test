# This test is for move primary replica and move secondary replica 
# usage moveprimaryclient nodeName <partitionId>
# usage movesecondaryclient currentSecNodeName NewSecNodeName <partitionId>

set DummyPLBEnabled true
set DeletedReplicaKeepDuration 3
votes 10
cleantest
fmservice 3 1
cmservice 0 0
namingservice 1 3 1

+10  nodeprops=Color:Blue
verify

+20  nodeprops=Color:Blue
+30  nodeprops=Color:Blue
verify 

+40  nodeprops=Color:Blue
+50  nodeprops=Color:Blue
verify

# Verify the location of FMService replicas
!waitforstate FM.Replica.Role.FMService.10 Primary
!waitforstate FM.Replica.Role.FMService.20 Secondary
!waitforstate FM.Replica.Role.FMService.30 Secondary

# Verify the location of NamingService replicas
!waitforstate FM.Replica.Role.NamingService.10 Primary
!waitforstate FM.Replica.Role.NamingService.20 Secondary
!waitforstate FM.Replica.Role.NamingService.30 Secondary

createname fabric:/stateless
createservice fabric:/stateless CalculatorServiceType n 1 3
verify

createname fabric:/stateful
createservice fabric:/stateful TestStoreServiceType y 1 3
verify

# Create a persisted stateful service
createservice fabric:/persisted TestPersistedStoreServiceType y 1 3 persist  constraint=(Color==Blue)
verify

# Verify the location of user service replicas
!waitforstate FM.Replica.Role.fabric:/persisted.50 Primary
!waitforstate FM.Replica.Role.fabric:/persisted.40 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.30 Secondary

# Capture the PartitionIDs of all services
!var FMServiceFTID FM.FT.PartitionId.FMService
!var NamingServiceFTID FM.FT.PartitionId.NamingService
!var UserServiceFTID FM.FT.PartitionId.fabric:/persisted
!var StatelessServiceFTID FM.FT.PartitionId.fabric:/stateless 
gfum
verify

# Promote node 30 replica to primary
moveprimaryclient 30 <var.UserServiceFTID>
# Verify the location of user service replicas
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.40 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.30 Primary

verify
#move primary 
moveprimaryclient 40 <var.UserServiceFTID>
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.40 Primary
!waitforstate FM.Replica.Role.fabric:/persisted.30 Secondary

verify

#move primary to not existed node
moveprimaryclient 70 <var.UserServiceFTID> NodeNotFound

#move primary 
moveprimaryclient 10 <var.UserServiceFTID>
!waitforstate FM.Replica.Role.fabric:/persisted.10 Primary
!waitforstate FM.Replica.Role.fabric:/persisted.40 NullReplica
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.30 Secondary


verify

# move secondary to node not existing node 80 
movesecondaryclient 30 80 <var.UserServiceFTID> NodeNotFound

# move secondary to node 20 
movesecondaryclient 30 20 <var.UserServiceFTID>
!waitforstate FM.Replica.Role.fabric:/persisted.20 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.10 Primary
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary

verify
gfum

# move node 20 as primary (node 20 doesnot have replica)
moveprimaryclient 20 <var.UserServiceFTID>
#verify
!waitforstate FM.Replica.Role.fabric:/persisted.20 Primary
!waitforstate FM.Replica.Role.fabric:/persisted.10 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary

verify

movesecondaryclient 10 40 <var.UserServiceFTID>
!waitforstate FM.Replica.Role.fabric:/persisted.40 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.20 Primary
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary

verify

# need wait for few sec before calling below command. 
movesecondaryclient 40 10 <var.UserServiceFTID>
!waitforstate FM.Replica.Role.fabric:/persisted.10 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.50 Secondary
!waitforstate FM.Replica.Role.fabric:/persisted.20 Primary

verify
gfum

# expected exception secondary already exists. 
movesecondaryclient 10 50 <var.UserServiceFTID> AlreadySecondaryReplica

verify
gfum

# expected exception 
moveprimaryclient 20 <var.UserServiceFTID> AlreadyPrimaryReplica

# Try moving stateless service 
# expected exception 
moveprimaryclient 30 <var.StatelessServiceFTID> InvalidPartitionOperation


#promote FM 40 as primary 
moveprimaryclient 40 <var.FMServiceFTID>
#verify 
!waitforstate FM.Replica.Role.FMService.40 Primary

verify
# move secondary fm service to new secondary node 
movesecondaryclient 30 10 <var.FMServiceFTID>
#verify
!waitforstate FM.Replica.Role.FMService.10 Secondary

verify

# move FM service secondary 
movesecondaryclient 10 20 <var.FMServiceFTID> AlreadySecondaryReplica
#verify 
!waitforstate FM.Replica.Role.FMService.20 Secondary


verify 
# moveprimaryclient 10 <var.FMServiceFTID>
moveprimaryclient 10 <var.FMServiceFTID>
!waitforstate FM.Replica.Role.FMService.10 Primary

verify

# promote node 40 Naming service Secondary to primary  
moveprimaryclient 40 <var.FMServiceFTID>
!waitforstate FM.Replica.Role.FMService.40 Primary

verify

#promote Naming service on node 50 as primary
moveprimaryclient 50 <var.NamingServiceFTID>
#verify 
!waitforstate FM.Replica.Role.NamingService.50 Primary

verify

# move naming service secondary to new node 
movesecondaryclient 20 40 <var.NamingServiceFTID>
!waitforstate FM.Replica.Role.NamingService.40 Secondary
verify

# move naming service secondary to new node 
movesecondaryclient 40 RANDOM <var.NamingServiceFTID>
verify

# move naming service secondary to new node 
moveprimaryclient 20 <var.NamingServiceFTID>
#verify 
!waitforstate FM.Replica.Role.NamingService.20 Primary

verify

# brining up extra node with Red color to test to see if the moveprimary command violates constraints.
+60  nodeprops=Color:Red
verify

!pause 5

moveprimaryclient 60 <var.UserServiceFTID> ConstraintNotSatisfied
!waitforstate FM.Replica.Role.fabric:/persisted.20 Primary
verify

moveprimaryclient 60 <var.UserServiceFTID> ConstraintNotSatisfied
!waitforstate FM.Replica.Role.fabric:/persisted.20 Primary
verify

set ConstraintCheckEnabled false

moveprimaryclient 60 <var.UserServiceFTID> FORCE
!waitforstate FM.Replica.Role.fabric:/persisted.60 Primary
verify

moveprimaryclient 20 <var.UserServiceFTID>
!waitforstate FM.Replica.Role.fabric:/persisted.20 Primary
verify

moveprimaryclient RANDOM <var.UserServiceFTID>
verify

moveprimaryclient RANDOM <var.UserServiceFTID> FORCE
verify

set ConstraintCheckEnabled true
!pause 5
verify 

# brining down the node to make sure the <var.UserServiceFTID> isn't on it after the force command
-60
verify

# brining upnode with Red color to reset the state for the rest of the test
+60  nodeprops=Color:Red
verify

createservice fabric:/affinitizedpersisted TestPersistedStoreServiceType y 1 3 persist servicecorrelations=fabric:/persisted,affinity

verify
!var AffinitizedServiceFTID FM.FT.PartitionId.fabric:/affinitizedpersisted

moveprimaryclient 60 <var.AffinitizedServiceFTID> ConstraintNotSatisfied

+70 cap=memory:10
+80 cap=memory:0

createname fabric:/capacitypersisted
createservice fabric:/capacitypersisted TestPersistedStoreServiceType y 1 1 persist metrics=memory,Medium,5,5

verify
!var CapacityServiceFTID FM.FT.PartitionId.fabric:/capacitypersisted

moveprimaryclient 80 <var.CapacityServiceFTID> ConstraintNotSatisfied

!q
