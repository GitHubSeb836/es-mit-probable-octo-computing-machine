votes 20 30
fmservice 7 2
namingservice 1 3 1
cmservice 3 1
cleantest

set HealthReportSendInterval 5
set HealthReportRetrySendInterval 5
set UpgradeStatusPollInterval 5
set UpgradeHealthCheckInterval 5
!setcfg Management.CleanupApplicationPackageOnProvisionSuccess=false

+10
+20
+30
verify

#
# JSON policy format can be found through ServiceModel::ApplicationHealthPolicy::ToString()
#
!string jsonpolicymanifest \
{\
    "ConsiderWarningAsError":false,\
    "MaxPercentUnhealthyDeployedApplications":0,\
    "DefaultServiceTypeHealthPolicy":\
    {\
        "MaxPercentUnhealthyServices":0,\
        "MaxPercentUnhealthyPartitionsPerService":0,\
        "MaxPercentUnhealthyReplicasPerPartition":0\
    },\
    "ServiceTypeHealthPolicyMap":[]\
}\

# 
# Application version 1.0
#
app.add version10 TestApp 1.0
app.clear version10

app.healthpolicy version10 jsonpolicy=<string.jsonpolicymanifest>

app.servicepack version10 ServicePackageA version=1.0
app.servicepack version10 ServicePackageB version=1.0

app.servicetypes version10 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes version10 ServicePackageB ServiceTypeB1 stateful

app.codepack version10 ServicePackageA CodeA1 types=ServiceTypeA1 version=1.0
app.codepack version10 ServicePackageB CodeB1 types=ServiceTypeB1 version=1.0

app.reqservices version10 ServiceA1 ServiceTypeA1 stateful partition=1 replica=3
app.reqservices version10 ServiceB1 ServiceTypeB1 stateful partition=1 replica=3

app.upload version10

# 
# Application version 1.1 
# Add a new service package, add  new code package to existing service package, add a 
# new service type to existing service package and add a new required service and template
#

app.add version11 TestApp 1.1 version10

app.servicepack version11 ServicePackageA version=1.1 configversion=1.1 dataversion=1.0
app.servicepack version11 ServicePackageB version=1.1 configversion=1.1 dataversion=1.0
app.servicepack version11 ServicePackageC version=1.0
app.servicepack version11 ServicePackageD version=1.0

app.servicetypes version11 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes version11 ServicePackageA ServiceTypeA2 stateful
app.servicetypes version11 ServicePackageB ServiceTypeB1 stateful
app.servicetypes version11 ServicePackageB ServiceTypeB2 stateless
app.servicetypes version11 ServicePackageC ServiceTypeC1 stateless
app.servicetypes version11 ServicePackageD ServiceTypeD1 stateful
app.servicetypes version11 ServicePackageD ServiceTypeD2 stateless

app.codepack version11 ServicePackageA CodeA1 types=ServiceTypeA1,ServiceTypeA2 version=1.1
app.codepack version11 ServicePackageB CodeB1 types=ServiceTypeB1 version=1.1
app.codepack version11 ServicePackageB CodeB2 types=ServiceTypeB2 version=1.0
app.codepack version11 ServicePackageC CodeC1 types=ServiceTypeC1 version=1.0
app.codepack version11 ServicePackageD CodeD1 types=ServiceTypeD1 version=1.0
app.codepack version11 ServicePackageD CodeD2 types=ServiceTypeD2 version=1.0

app.reqservices version11 ServiceA1 ServiceTypeA1 stateful partition=1 replica=3
app.reqservices version11 default_service/ServiceA2 ServiceTypeA2 stateful partition=1 replica=3
app.reqservices version11 ServiceB1 ServiceTypeB1 stateful partition=1 replica=3
app.reqservices version11 ServiceB2 ServiceTypeB2 stateless partition=1 instance=3
app.reqservices version11 default_service/ServiceC1 ServiceTypeC1 stateless partition=2 instance=3
app.reqservices version11 ServiceD1 ServiceTypeD1 stateful partition=1 replica=3

app.servicetemplate version11 ServiceTypeA1 stateful partition=2 replica=2
app.servicetemplate version11 ServiceTypeB2 stateless partition=1 instance=3

app.upload version11

#
# Provision application version 1.0
#
provisionapp version10

#
# Provision application version 1.1
#
provisionapp version11

#
# Create application version 1.0
#
createapp fabric:/app1/monitoredupgradetest TestApp 1.0
verify

createservice fabric:/app1/monitoredupgradetest/instance.test ServiceTypeA1 y 1 3 persist appname=fabric:/app1/monitoredupgradetest
verify

!string jsonpolicyapi \
{\
    "ConsiderWarningAsError":false,\
    "MaxPercentUnhealthyDeployedApplications":0,\
    "DefaultServiceTypeHealthPolicy":\
    {\
        "MaxPercentUnhealthyServices":0,\
        "MaxPercentUnhealthyPartitionsPerService":0,\
        "MaxPercentUnhealthyReplicasPerPartition":0\
    },\
    "ServiceTypeHealthPolicyMap":[]\
}\

# Report health with error state for replica in application to trigger a rollback
reporthealth replica replicaid=fabric:/app1/monitoredupgradetest/ServiceA1#0#2 sequencenumber=1 healthstate=error
queryhealth replica replicaid=fabric:/app1/monitoredupgradetest/ServiceA1#0#2 expectedhealthstate=error

#
# Validate monitoring policies
#

# Valid failaction, Invalid timeout combinations
upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckretry=5 upgradetimeout=9 udtimeout=9 errors=ApplicationUpgradeValidationError
upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckretry=5 upgradetimeout=11 udtimeout=9 errors=ApplicationUpgradeValidationError
upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckretry=5 upgradetimeout=11 udtimeout=12 errors=ApplicationUpgradeValidationError

upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckstable=5 healthcheckretry=0 upgradetimeout=9 udtimeout=9 errors=ApplicationUpgradeValidationError
upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored failaction=rollback healthcheckwait=5 healthcheckstable=5 healthcheckretry=0 upgradetimeout=11 udtimeout=9 errors=ApplicationUpgradeValidationError

# Invalid failaction (default is invalid)
upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored failaction=invalid errors=ApplicationUpgradeValidationError

#
# Upgrade application from version 1.0 to 1.1
#
# Use default health policy (everything must be 100% healthy)
#
upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored failaction=rollback healthcheckretry=0 healthcheckstable=0

# Inform test that a rollback is expected for the application so that the verify validates that it is in original version
setrollbackapp fabric:/app1/monitoredupgradetest 1.0 expectedreason=services,ServiceTypeA1,1,0 failurereason=HealthCheck

# Verify will validate that the application is back to original state
verifyupgradeapp fabric:/app1/monitoredupgradetest 
verify

# Override the error health report with OK

reporthealth replica replicaid=fabric:/app1/monitoredupgradetest/ServiceA1#0#2 sequencenumber=2 healthstate=ok
queryhealth replica replicaid=fabric:/app1/monitoredupgradetest/ServiceA1#0#2 expectedhealthstate=ok

# Should be able to unprovision and re-provision after upgrade failure
unprovisionapp TestApp 1.1
provisionapp version11 Success

# Now if the application is upgraded it will complete successfully
upgradeapp fabric:/app1/monitoredupgradetest 1.1 Rolling upgrademode=monitored healthcheckwait=5 healthcheckretry=30 healthcheckstable=10 failaction=rollback jsonpolicy=<string.jsonpolicyapi>
verifyupgradeapp fabric:/app1/monitoredupgradetest
verify

unprovisionapp TestApp 1.0

deleteapp fabric:/app1/monitoredupgradetest
verify

unprovisionapp TestApp 1.1

verifyimagestore

!q
