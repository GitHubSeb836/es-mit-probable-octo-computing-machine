set DummyPLBEnabled true
votes 20 30
fmservice 7 2
namingservice 1 3 1
cmservice 3 1
cleantest

set HealthReportSendInterval 1
set HealthReportRetrySendInterval 5
set UpgradeStatusPollInterval 5
set UpgradeHealthCheckInterval 5

+10
+20
+30
+40
+50
verify

# 
# Application version 1.0
#
app.add version10 TestApp 1.0
app.clear version10

app.servicepack version10 ServicePackageA version=1.0
app.servicepack version10 ServicePackageB version=1.0

app.servicetypes version10 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes version10 ServicePackageB ServiceTypeB1 stateful

app.codepack version10 ServicePackageA CodeA1 types=ServiceTypeA1 version=1.0
app.codepack version10 ServicePackageB CodeB1 types=ServiceTypeB1 version=1.0

app.reqservices version10 ServiceA1 ServiceTypeA1 stateful partition=1 replica=3
app.reqservices version10 ServiceB1 ServiceTypeB1 stateful partition=1 replica=3

app.upload version10

# 
# Application version 1.1 
# Add a new service package, add  new code package to existing service package, add a 
# new service type to existing service package and add a new required service and template
#

app.add version11 TestApp 1.1 version10

app.servicepack version11 ServicePackageA version=1.1 configversion=1.1 dataversion=1.0
app.servicepack version11 ServicePackageB version=1.1 configversion=1.1 dataversion=1.0
app.servicepack version11 ServicePackageC version=1.0
app.servicepack version11 ServicePackageD version=1.0

app.servicetypes version11 ServicePackageA ServiceTypeA1 stateful persist
app.servicetypes version11 ServicePackageA ServiceTypeA2 stateful
app.servicetypes version11 ServicePackageB ServiceTypeB1 stateful
app.servicetypes version11 ServicePackageB ServiceTypeB2 stateless
app.servicetypes version11 ServicePackageC ServiceTypeC1 stateless
app.servicetypes version11 ServicePackageD ServiceTypeD1 stateful
app.servicetypes version11 ServicePackageD ServiceTypeD2 stateless

app.codepack version11 ServicePackageA CodeA1 types=ServiceTypeA1,ServiceTypeA2 version=1.1
app.codepack version11 ServicePackageB CodeB1 types=ServiceTypeB1 version=1.1
app.codepack version11 ServicePackageB CodeB2 types=ServiceTypeB2 version=1.0
app.codepack version11 ServicePackageC CodeC1 types=ServiceTypeC1 version=1.0
app.codepack version11 ServicePackageD CodeD1 types=ServiceTypeD1 version=1.0
app.codepack version11 ServicePackageD CodeD2 types=ServiceTypeD2 version=1.0

app.reqservices version11 ServiceA1 ServiceTypeA1 stateful partition=1 replica=3
app.reqservices version11 default_service/ServiceA2 ServiceTypeA2 stateful partition=1 replica=3
app.reqservices version11 ServiceB1 ServiceTypeB1 stateful partition=1 replica=3
app.reqservices version11 ServiceB2 ServiceTypeB2 stateless partition=1 instance=3
app.reqservices version11 default_service/ServiceC1 ServiceTypeC1 stateless partition=2 instance=3
app.reqservices version11 ServiceD1 ServiceTypeD1 stateful partition=1 replica=3

app.servicetemplate version11 ServiceTypeA1 stateful partition=2 replica=2
app.servicetemplate version11 ServiceTypeB2 stateless partition=1 instance=3

app.upload version11

#
# Provision application version 1.0
#
provisionapp version10

#
# Provision application version 1.1
#
provisionapp version11

#
# Create application version 1.0
#
createapp fabric:/app1/monitoredupgrade TestApp 1.0
verify

createservice fabric:/app1/monitoredupgrade/instance.test ServiceTypeA1 y 1 5 persist appname=fabric:/app1/monitoredupgrade
verify

#
# Monitored Upgrade with failuremode=manual; Move to the next domains manually
#

# Report health with error state for replica in application to trigger a failure during health check
!var savedPartitionID FM.FT.PartitionId.fabric:/app1/monitoredupgrade/ServiceA1#0

reporthealth partition partitionguid=<var.savedPartitionID> sequencenumber=1 healthstate=error
queryhealth partition partitionguid=<var.savedPartitionID> expectedhealthstate=error

# Upgrade application from version 1.0 to 1.1
# Use default health policy (everything must be 100% healthy)
upgradeapp fabric:/app1/monitoredupgrade 1.1 Rolling upgrademode=monitored failaction=manual healthcheckretry=0 healthcheckstable=0

# Verify with a timeout that the upgrade does not move to 20_ud
verifyupgradeapp fabric:/app1/monitoredupgrade upgradedomains=10_ud,20_ud timeout=20 expectTimeout

# Make sure that the service can be resolved
resolve fabric:/app1/monitoredupgrade/instance.test 0 noverify

# Move Next API
upgradeappmovenext fabric:/app1/monitoredupgrade
verifyupgradeapp fabric:/app1/monitoredupgrade upgradedomains=10_ud,20_ud

# Verify with a timeout that the upgrade does not move to 30_ud
verifyupgradeapp fabric:/app1/monitoredupgrade upgradedomains=10_ud,20_ud,30_ud timeout=20 expectTimeout

upgradeappmovenext fabric:/app1/monitoredupgrade
verifyupgradeapp fabric:/app1/monitoredupgrade upgradedomains=10_ud,20_ud,30_ud

# Override the error health report with OK
reporthealth partition partitionguid=<var.savedPartitionID> sequencenumber=2 healthstate=ok
queryhealth partition partitionguid=<var.savedPartitionID> expectedhealthstate=ok

# Resume the monitored upgrade
upgradeapp fabric:/app1/monitoredupgrade 1.1 Rolling upgrademode=monitored failaction=manual healthcheckwait=5 healthcheckretry=30 healthcheckstable=0

verifyupgradeapp fabric:/app1/monitoredupgrade
resolve fabric:/app1/monitoredupgrade/instance.test 0 noverify
verify

#
# Clean up
#
deleteapp fabric:/app1/monitoredupgrade
verify

unprovisionapp TestApp 1.0
unprovisionapp TestApp 1.1

verifyimagestore

!q
